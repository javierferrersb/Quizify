using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace Quizify.Services
{
    public interface IQuizifyService
    {
        public Task<bool> StartDBTask();
        public bool GetPerson(string email, string password);
        public List<List<String>> GetPreviousQuizes(string studentEmail, int topicId);
        public void SignUp(int userType, string name, string email, string password);
        public List<List<String>> GetQuestionsFromBateria(int bateriaId);
        public List<List<String>> GetAllQuestions();
        public void RemoveBatteryFromQuiz(int quizId, int batteryId, int position);
        public double GetPesoNotaBateriaFromPreguntaAndQuiz(int quizId, int pId);
        public int GetIdPreguntaAsociadaRespuestaPreguntaAbiertaById(int rpa);
        public bool GetTerminadoLastRealizaQuizById(int RealizaQuizId);
        public int GetQuestionType(int questionId);
        public int GetQuestionAnswerType(int respuestaPreguntaId);
        public int GetQuizNumberOfTries(int quizId);
        public string GetRespuestOfRespuestaPreguntaAbiertaById(int rpa);
        public int GetSeleccionStudentAnswerRespuestaMultiple(int respuestaId, int questionId);
        public string GetStatmentRespuestaPreguntaAbiertaById(int rpa);
        public int GetIdRealizaQuizFromQuizAndStudent(int quiz, string student);
        public int GetLastRealizaQuizById(int RealizaQuizId);
        public int GetIdRespuestaRealizacionById(int RealizacionId, int i);
        public int GetIdPreguntaAsociadaRespuestaRealizacionById(int RealizacionId, int i);
        public int GetCountRespuestasRealizacionById(int RealizacionId);
        public string GetNombreEstudianteByEmail(string email);
        public string GetEnunciadoPreguntaById(int id);
        public int GetIdRespuestaPreguntaFromLastRealizacion(int quizId, string studentEmail, int posicion);
        public double getNotaRestoQuizes(int contenidoId);
        public void AddItemABateria(int quizId, int ItemId);
        public string? GetOpenAnswerRespuestaPreguntaAbierta(int rpa);
        public string GetNameBatteryById(int batteryId);
        public void SetBatteryName(int id, string name);
        public double GetValorQuiz(int quizId);
        public int GetQuizStatus(int quizId);
        public void AddBatteryToQuiz(int batteryId, int quizId);
        public int CreateBateria(int type, int quizId, string name);
        public void SetQuizWeight(int quiz, double mark);
        public int getNumQuizesRestantes(string instructorId);
        public void setQuizes(string instructorId, int nQuiz);
        public void FillExampleData();
        public void RemoveQuestionFromBattery(int bateriaId, int preguntaId);
        public void InsertQuestionToBattery(int bateriaId, int preguntaId);
        public string GetCourseDescription(int courseId);
        public List<List<String>> GetQuestionsFromInstructor(string instructorEmail, int questionType);
        public int GetQuestionTypeFromBateria(int bateriaId);
        public int GetCourseIcon(int courseId);
        public void UpdateCourseInfo(int courseId, string name, string description, int icon);
        public int CreateQuiz(string nombre, int modoRespuesta, int tiempo, double peso, DateTime fechaCreacion, int numeroIntentos, int contenidoId, bool VerResultado, double notaquiz);
        public bool InscribeStudentToCourse(string studentEmail, int courseId);
        public void SetNotaBateriaWeight(int nbId, int dificultad, double peso);
        public int GetRealizaQuizIdFromQuizAndStudent(int quizId, string studentEmail);
        public bool GetRealizaQuizFromQuizAndStudentIsNull(int quizId, string studentEmail);
        public int CreateRealizaQuiz(int quizId, string studentEmail);
        public int CreateRealizacionInOrder(int realizaQuizId);
        public int CreateRealizacionRandomOrder(int realizaQuizId);
        public void UpdateEntity<T>(T modifiedEntity) where T : class;
        public int CreateNewCourse(String instructorEmail, String name, int icon, String description);
        public int CopyQuizNormal(String quizName, int quizId, int topicId);
        public int CopyCoursePrototype(String nombreCurso, int cursoId, string EmailCreator);
        public void AddTopicToCourse(int courseId, string newTopicName);
        public string GetTopicName(int topicId);
        public string GetCourseName(int courseId);
        public void GetQuizzesFromTopic(int topicId, List<List<String>> list);
        public bool IsPersonAStudent(string personEmail);
        public List<List<String>> GetTopicsFromCourse(int courseId);
        public string GetPersonName(string personEmail);
        public int GetCourseOfTopic(int topicId);
        public string GetQuizName(int quizId);
        public int GetTopicFromQuiz(int quizId);
        public List<List<String>> GetCoursesFromPerson(string personEmail);
        public bool StudentHasUnfinishedAnsweredTest(string personEmail, int quizId);
        public int GetQuizNumberOfAttempts(int quizId);
        public int GetStudentRealizationsCount(string personEmail, int quizId);
        public bool GetQuizViewResult(int quizId);
        public List<List<String>> GetAllQuizzes(String personEmail);
        public bool IsQuestionInBateria(int questionId, int bateriaId);
        public List<string> AddContenidoByCurso(string personEmail, string cursoSelected);
        public List<String> GetCoursesFromTeacher(string email);
        public string getCursoByQuizId(int quizId);
        public string getContenidoByQuizId(int quizId);
        public int getCountQuestionOfBattery(int batteryId);
        public string GetNameQuizById(int quizId);
        public int GetQuizFromInstructorCourseNameTopicNameAndQuizName(string email, string nombreCurso, string nombreContenido, string nombreQuiz);
        public List<String> GetQuizzesFromInstructorCourseAndTopic(string email, string nombreCurso, string nombreContenido);
        public List<List<String>> GetBatteryStringList();
        public void GetStudentsAttributes(ICollection<String> students, List<List<String>> l);
        public double GetNotaLastRealizacion(int quizId, string studentEmail);
        public int GetQuizSize(int quizId);
        public int GetPreguntaIdFromLastRealizacion(int quizId, string studentEmail, int posicion);
        public bool RespondidoCorrectamenteVF(int quizId, string studentEmail, int posicion);
        public void LaunchQuiz(int quizId, DateTime openingDate, DateTime closingDate, bool viewResult, bool randomOrder, int numTries, int time, int answerMode);
        public void SetQuizName(int quizId, string quizName);
        public List<List<String>> GetBatteriesFromQuiz(int quizId);
        public string GetQuestionStatement(int questionId);
        public void SetQuestionStatement(int questionId, string statement);
        public void SetOpenStudentQuestionAnswer(int currentRealizacionId, int questionId, string answer);
        public int GetQuestionIdFromBattery(int batteryId, int questionPosition);
        public List<String> StudentsInACourse(int courseId);
        public double GetNotaQuizById(int quizId);
        public double GetNotaNotaBateriaById(int notabateriaId);
        public int GetDificultadNotaBateriaById(int notabateriaId);
        public bool? GetVFStudentAnswer(int currentRealizacionId, int questionId);
        public bool? GetVFStudentAnswer(int respondePreguntaId);
        public int GetRealizaQuizFromQuizAndStudent(int quiz, string student);
        public bool GetVFCorrectAnswer(int questionId);
        public void SetVFStudentQuestionAnswer(int currentRealizacionId, int questionId, bool answer);
        public void SetVFCorrectAnswer(int questionId, bool correctAnswer);
        public int GetQuizIdFromRealizaQuizId(int realizaQuizId);
        public int GetNotaBateriaIdFromBatteryAndQuiz(int quizId, int batteryId);
        public void CreateQuestionInBateria(int bateriaId, string statement, string instructorEmail);
        public string GetInstructorEmailFromQuiz(int quizId);
        public int GetQuizAnswerMode(int quizId);
        public int GetUnfinishedRealizacionId(int quizId, string studentEmail);
        public int GetRealizacionCurrentQuestionNum(int realizacionId);
        public bool QuizHasRandomQuestions(int quizId);
        public void MarkRealizacionAsFinished(int realizacionId);
        public void SetRemainingTimeRealizacion(int realizacionId, int secondsPassed);
        public int GetRemainingTimeRealizacion(int realizacionId);
        public List<List<String>> GetQuestionsFromRealizacion(int realizacionId);
        public string getStatementByPregunta(int preguntaId);
        public bool? getVFAnswerByRespuestaPregunta(int respuestaPreguntaId);
        public int GetSelectionAnswerFromAnswerId(int respuestaPreguntaId);
        public int getRespuestaPreguntaIdByRealizacionAndCurrentQuestionNum(int realizacionId, int questionNum);
        public int GetRespuestaPreguntaIdFromLastRealizacion(int quizId, string studentEmail, int questionNum);
        public double GetPuntuacionDeRealizacionById(int realizacionId);
        public int GetLasRealizacionIdFromRealizaQuiz(int quizEstudiante);
        public bool QuizTienePreguntasAleatorias(int quizId);
        public int GetQuestionToOpen(int realizacionId, int currentQuestion);
        public double GetNotaDeNotaBateriaFromPreguntaAndQuiz(int quizId, int QuestionToOpenId);
        public int GetRespuestaDeUnEstudiante(int respuestaUnEstudiante, int currentQuestion);
        public int GetPreguntasEnRealizacaion(int realizacionId);
        public int GetRespuestaPreguntaFromRealizacion(int realizacionId, int currentQuestion);
        public int GetNumBateriasFromQuiz(int quizId);
        public ICollection<ICollection<int>> GetOrderedQuizAnswers(ICollection<string> estudiantesQueHanHechoQuiz, int quizId);
        public int GetQuizTime(int quizId);
        public double GetPointsFromQuizRealizacion(int realizacionId);
        public void SetPointsToQuizRealizacion(int realizacionId, double points);
        public void SetRealizacionCurrentQuestionNum(int realizacionId, int currentQuestionNum);
        public string GetOpenStudentAnswer(int currentRealizaiconId, int questionId);
        public DateTime? GetQuizOpeningDate(int quizId);
        public DateTime? GetQuizClosingDate(int quizId);
        public void UnlaunchQuiz(int quizId);
        public void SetQuizViewAnsers(int quizId, bool viewAnswers);
        public List<List<String>> GetRealizationsFromQuiz(int quizId, bool endAllTests);
        public List<List<String>> GetRespuestasPreguntasFromRealizacion(int realizationId);
        public double? GetPointsFromRealizationQuestion(int respuestaPreguntaId);
        public void SetPointsFromRealizationQuestion(int respuestaPreguntaId, double points);
        public void SetQuizAsCorrected(int quizId, List<int> ri);
        public string GetStudentFromRealizaQuiz(int realizaQuizId);
        public void SetSeleccionCorrectAnswer(int questionId, bool op1, bool op2, bool op3, bool op4);
        public void SetSeleccionTextOptions(int questionId, string op1, string op2, string op3, string op4);
        public List<string> GetSeleccionTextOptions(int questionId);
        public void SetSeleccionStudentAnswer(int currentRealizacionId, int questionId, int comboIndex);
        public int GetSeleccionStudentAnswer(int currentRealizacionId, int questionId);
        public List<bool> GetSeleccionCorrectAnswer(int questionId);
        public List<string> GetCorrespondenciaFrases(int questionId);
        public List<string> GetCorrespondenciaTerminos(int questionId);
        public List<string> GetKeyWordsFromOpenQuestion(int questionId);
        public void AddKeyWordToOpenQuestion(int questionId, string keyWord);
        public void RemoveKeyWordFromOpenQuestion(int questionId, string keyWord);
        public bool IsQuizActiveFromPregunta(int preguntaId, int quizId);
        public List<List<string>> GetAllTopicsString();
        public void SetTopicToQuestion(int contenidoId, int preguntaId);
        public void UpdateAllQuizzesStatus();
        public void FinishQuizImmediately(int quizId);
        public void SetCorrespondenciaFraseTermino(int questionId, int terminoIndex, int fraseIndex);
        public void SetCorrespondenciaFrasesTerminosText(int questionId, string[] frases, string[] terminos);
        public String GetNumberOfRealizaciones(int quizId, int cursoId);
        public double GetAverageMarkOfQuiz(int quizId, int cursoId);
        public ICollection<double> GetAllMarks(int quizId, int cursoId);
        public double GetNotaMediaDePregunta(ICollection<int> respuestasAbiertas);
        public double GetStandardDeviation(int quizId, int cursoId);
        public void SetCorrespondenciaStudentAnswer(int currentRealizacionId, int questionId, int terminoIndex, int fraseIndex);
        public Dictionary<int, int> GetCorrespondenciaCorrectAnswer(int questionId);
        public Dictionary<int, int> GetCorrespondenciaStudentAnswer(int currentRealizacionId, int questionId);
        public Dictionary<int, int> getCorrespondenciaAnswerByRespuestaPregunta(int respuestaPreguntaId);
        public void SetCorrespondenciaNumberPhrases(int questionId, int num);
        public void initPreguntaCorrespondencia(int questionId, string frase, string termino);
        public void CrearQuizDeRecuperacion(int quizId, string nombre, string autorEmail, DateTime fechaCreacion);
        public bool RespuestaIsNotNull(int respuestaPreguntaId);
    }
}
